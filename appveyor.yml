version: 0.4.6b{build}

branches:
  only:
  - buildmods
build:
  verbosity: minimal

environment:

  my_variable:
    secure: tKYM1oHNwH7n+FO1exDSPzz76oio0iXtsfkZ0o7kuOY=

  matrix:

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      ARCH: "x64"
      CONFIG: Release
      PYVER: 38
      PYLOC: "/home/appveyor/.localpython3.8.2/bin/python3"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      GENERATOR: "Visual Studio 16 2019"
      ARCH: "x64"
      CONFIG: Release
      PYVER: 38
      PYLOC: "C:/Python38-x64/python.exe"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      GENERATOR: "Visual Studio 16 2019"
      ARCH: "x64"
      CONFIG: Release
      PYVER: 37
      PYLOC: "C:/Python37-x64/python.exe"

matrix:
  fast_finish: true

build_script:
  - cmd: |
       git submodule update --init --recursive ./Dependencies/imgui
       git submodule update --init --recursive ./Dependencies/ImGuiFileDialog
       mkdir cmake-build-release
       cd cmake-build-Release
       cmake .. -G "%GENERATOR%" -A "%ARCH%" -DMVDIST_ONLY=True -DMVPY_VERSION=%PYVER%
       cd ..
       cmake --build cmake-build-release --config "%CONFIG%"

  - sh: |
       command -v virtualenv || install_virtualenv
       declare PY_VERSIONS=("3.8.5")
       for i in "${PY_VERSIONS[@]}"; do
           VENV_PATH=${HOME}/venv${i%%[abrcf]*}
           VENV_MINOR_PATH=${HOME}/venv${i%.*}
           if [ ! -d ${VENV_PATH} ]; then
           curl -fsSL -O "http://www.python.org/ftp/python/${i%%[abrcf]*}/Python-${i}.tgz" ||
               { echo "[WARNING] Cannot download Python ${i}."; continue; }
           tar -zxf "Python-${i}.tgz" &&
           pushd "Python-${i}" ||
               { echo "[WARNING] Cannot unpack Python ${i}."; continue; }
           PY_PATH=${HOME}/.localpython${i}
           mkdir -p "${PY_PATH}"
           ./configure --enable-shared --silent "--prefix=${PY_PATH}" &&
           make --silent &&
           make install --silent >/dev/null ||
               { echo "[WARNING] Cannot make Python ${i}."; popd; continue; }
           if [ ${i:0:1} -eq 3 ]; then
               PY_BIN=python3
           else
               PY_BIN=python
           fi
           virtualenv -p "$PY_PATH/bin/${PY_BIN}" "${VENV_PATH}" ||
               { echo "[WARNING] Cannot make virtualenv for Python ${i}."; popd; continue; }
           popd
           echo "Linking ${VENV_MINOR_PATH} to ${VENV_PATH}"
           rm -f ${VENV_MINOR_PATH}
           ln -s ${VENV_PATH} ${VENV_MINOR_PATH}
           fi
       done
       find "${HOME}" -name "Python-*" -type d -maxdepth 1 | xargs -I {} rm -rf {}

  - sh: cd $HOME
  - sh: pwd
  - sh: ls
  - sh: cd .localpython3.8.5
  - sh: ls
  - sh: cd bin
  - sh: ls
  - sh: |
      while IFS= read -r line; do echo $line; done < python3.8-config
  - sh: cd ..
  - sh: cd include/python3.8
  - sh: ls
  - sh: cd ../..
  - sh: cd lib
  - sh: ls
  - sh: cd ../share
  - sh: ls
  - sh: cd /home/appveyor/projects/dearpygui
  - sh: |
       git submodule update --init --recursive ./Dependencies/imgui
       git submodule update --init --recursive ./Dependencies/ImGuiFileDialog
       git submodule update --init --recursive ./Dependencies/glfw
       sudo apt-get update
       sudo apt-get install libglu1-mesa-dev libgl1-mesa-dev xorg-dev libxrandr-dev -y
       mkdir cmake-build-release
       cd cmake-build-release
       cmake .. -DMVDIST_ONLY=True -DMVPY_VERSION=${PYVER}
       cd ..
       cmake --build cmake-build-release --config "${CONFIG}"

on_success:
  - cmd: |
       cd Distribution
       call %PYLOC% BuildPythonWheel.py C:/projects/dearpygui/cmake-build-release/DearPyGui/Release/core.pyd core.pyd
       call %PYLOC% -m pip install twine
       call %PYLOC% -m pip install wheel
       call %PYLOC% -m setup bdist_wheel --plat-name win_amd64 --dist-dir C:/projects/dearpygui/dist
       if %APPVEYOR_REPO_BRANCH%==development call %PYLOC% -m twine upload --repository testpypi C:/projects/dearpygui/dist/* -u RaylockLLC -p %my_variable% --skip-existing
       if %APPVEYOR_REPO_BRANCH%==stable call %PYLOC% -m twine upload C:/projects/dearpygui/dist/* -u RaylockLLC -p %my_variable% --skip-existing

  - sh: |
       cd Distribution
       ${PYLOC} BuildPythonWheel.py /home/appveyor/projects/dearpygui/cmake-build-release/DearPyGui/Release/core.pyd core.pyd
       ${PYLOC} -m pip install twine --upgrade
       ${PYLOC} -m pip install wheel
       ${PYLOC} -m setup bdist_wheel --plat-name manylinux1_x86_64 --dist-dir /home/appveyor/projects/dearpygui/dist
       if ${APPVEYOR_REPO_BRANCH}==development ${PYLOC} -m twine upload --repository testpypi /home/appveyor/projects/dearpygui/dist/* -u RaylockLLC -p ${my_variable} --skip-existing
       if ${APPVEYOR_REPO_BRANCH}==stable ${PYLOC} -m twine upload /home/appveyor/projects/dearpygui/dist/* -u RaylockLLC -p ${my_variable} --skip-existing
